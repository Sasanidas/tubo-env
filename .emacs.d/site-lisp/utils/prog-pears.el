;;; prog-pears.el -- Brief introduction here.

;; Author: Yang,Ying-chao <yangyingchao@g-data.com>

;;; Commentary:

;;; Code:


;;;###autoload
(defun yc/format-files ()
  "Format all files in `default-directory'."
  (interactive)
  (save-excursion
    (dolist (fn (directory-files default-directory nil
                                 (rx "." (or "c" "cpp" "cc" "cxx" "h" "hpp") eol)))

      (with-current-buffer (find-file-noselect fn)
        (clang-format-buffer)
        (save-buffer)
        (kill-buffer)))))


(defun yc/asm-post-process-objdump ()
  "Post process for asm file generated by `objdump'."
  (PDEBUG "asm post process for objdump")
  (let ((r-match-func  (rx bol  (+ alnum) (+ space) "<" (+ (or "_" alnum)) ">:" eol))
        (r-match-addr  (rx (+ space) (group (+ alnum)) ":" space))
        (r-match-codes (rx ":" (+ space) (* (repeat 2 alnum) space ) (* space)))
        (r-match-offset (rx "+" "0x" (group (+ alnum))  ">"))
        pos )

    (defun get-address ()
      "Get address"
      (if (looking-at r-match-addr)
          (let* ((m-data (match-data 1))
                 (addr-str (buffer-substring-no-properties (nth 2 m-data) (nth 3 m-data))))
            (string-to-number addr-str 16))))

    ;; first, add a space around "+"
    (save-excursion
      (while (search-forward-regexp r-match-offset nil t)
        (replace-match "+ 0x\\1 >"))
      )

    ;; then, remove instruction codes...
    (save-excursion
      (while (search-forward-regexp r-match-codes nil t)
        (replace-match ":	")))

    ;; last, calculate offset for instruction addresses.
    (save-excursion
      (while (setq pos (search-forward-regexp r-match-func nil t))
        (let* ((pos (1+ pos))
               (end (or (search-forward-regexp r-match-func nil t)
                        (point-max))))
          (goto-char end)
          (setq end (point-at-eol -1)) ;; update end position, we'll go back here later.
          (goto-char pos)
          (aif (get-address)
              (while (<= pos end)
                (goto-char pos)
                (unless (looking-at-p (rx (or (: bol eol)
                                              (: (* space)";" ))))
                  (let* ((addr (get-address))
                         (tmp-string (format "0x%x" (- addr it)))
                         (off-string (format "%s%s" tmp-string
                                             (make-string
                                              (- 7 (length tmp-string)) ? ))))
                    (insert off-string)
                    (setq end (+ end (length off-string)))))
                (setq pos (point-at-bol 2))))
          (goto-char end)
          (forward-line -1))))))

(defun yc/asm-post-process-gdb ()
  "Post process for asm file generated by `gdb'."
  (interactive)
  (PDEBUG "asm post process for gdb")
  (let ((r-match-offset (rx "<" (group "+" (+ digit)  ">:")))
        (r-match-offset-funcall (rx (group "<" (+? (or alnum "_"))) "+"
                                    (group (+ digit)  ">") eol) ))

    (save-excursion
      (goto-char (point-min))
      (while (search-forward-regexp r-match-offset nil t)
        ;; (replace-match "< \\1\t\t")
        (let* ((str (match-string 1)))
          (replace-match (format "< %s%s" str (if (> (length str) 5) "" "\t")))
          )
        ))
    (save-excursion
      (goto-char (point-min))
      (while (search-forward-regexp r-match-offset-funcall nil t)
        (replace-match "\\1 +\\2")))))

;;;###autoload
(defun yc/asm-post-process ()
  "Add offset to current file."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (cond
     ((looking-at-p (rx "Dump of assembler code for function"))
      (yc/asm-post-process-gdb))
     (t (yc/asm-post-process-objdump)))))

(provide 'prog-pears)

;; Local Variables:
;; coding: utf-8
;; indent-tabs-mode: nil
;; End:

;;; prog-pears.el ends here
